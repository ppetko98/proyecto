/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import modelo.dao.Implements.EspecieControllerImpl;
import modelo.entidades.CBPropiedad;
import modelo.entidades.Especie;
import modelo.entidades.Genetica;
import modelo.excepciones.EspecieException;
import utilidades.BaseDatos;
import utilidades.BaseSwing;
import utilidades.Validacion;
import utilidades.ValidacionException;
import vista.EspecieTableModel;

/**
 *
 * @author ppetk
 */
public class BuscarPanel extends JPanel {

    ResultSet rs;
    List<String> columnas;
    Map<String, String> propiedadesMap;
    PriorityQueue<CBPropiedad> props;
    Especie especiebuscada;
    Genetica genetica;
    String especieString;
    TableModel modelo;
    ActionEvent event = null;

    public BuscarPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        textBuscarEspecie = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeEspecie = new javax.swing.JTree();
        btnBuscarEspecie = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEspecie = new javax.swing.JTable();
        cbEspecie1 = new javax.swing.JCheckBox();
        cbEspecie2 = new javax.swing.JCheckBox();
        cbEspecie3 = new javax.swing.JCheckBox();
        cbEspecie4 = new javax.swing.JCheckBox();
        cbEspecie5 = new javax.swing.JCheckBox();
        cbEspecie6 = new javax.swing.JCheckBox();
        lblImagen = new javax.swing.JLabel();
        downloadButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setPreferredSize(new java.awt.Dimension(600, 400));
        setRequestFocusEnabled(false);

        textBuscarEspecie.setText("ghanensis");
        textBuscarEspecie.setToolTipText("");

        jScrollPane1.setVisible(false);
        jScrollPane1.setViewportView(treeEspecie);

        btnBuscarEspecie.setText("Buscar");
        btnBuscarEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEspecieActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setAutoscrolls(true);

        jScrollPane2.setVisible(false);
        tablaEspecie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaEspecie.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tablaEspecie.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaEspecie.setFocusable(false);
        tablaEspecie.setGridColor(new java.awt.Color(255, 255, 255));
        tablaEspecie.setRowSelectionAllowed(false);
        tablaEspecie.setShowHorizontalLines(false);
        jScrollPane2.setViewportView(tablaEspecie);

        cbEspecie1.setText("Autor");

        cbEspecie2.setText("Ecologia");

        cbEspecie3.setText("Referencias");

        cbEspecie4.setText("Secuencia");

        cbEspecie5.setText("Longitud");

        cbEspecie6.setText("Topolog√≠a");

        downloadButton.setVisible(false);
        downloadButton.setText("Descargar FASTA");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbEspecie2)
                                    .addComponent(cbEspecie1))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbEspecie4)
                                    .addComponent(cbEspecie5)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(textBuscarEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbEspecie3)
                                .addGap(24, 24, 24)
                                .addComponent(cbEspecie6)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downloadButton)
                            .addComponent(btnBuscarEspecie))
                        .addGap(31, 31, 31)
                        .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textBuscarEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarEspecie))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEspecie1)
                            .addComponent(cbEspecie4)
                            .addComponent(downloadButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEspecie2)
                            .addComponent(cbEspecie5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEspecie3)
                            .addComponent(cbEspecie6)))
                    .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        descargarClick();
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void btnBuscarEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEspecieActionPerformed
        buscarClick();
    }//GEN-LAST:event_btnBuscarEspecieActionPerformed

    private DefaultMutableTreeNode arbolEspecie(Especie e) throws SQLException {
        int id_especie = e.getId_especie();
        ResultSet rs = BaseDatos.executeQuery(BaseDatos.SELECT_ARBOL, id_especie);
        DefaultMutableTreeNode dominioRoot = new DefaultMutableTreeNode();
        DefaultMutableTreeNode leaf = new DefaultMutableTreeNode();

        DefaultMutableTreeNode[] path = new DefaultMutableTreeNode[7];
        if (rs.next()) {

            for (int i = 0; i < path.length; i++) {
                if (i == 0) {
                    dominioRoot = new DefaultMutableTreeNode(rs.getString(i + 1), true);
                    path[i] = dominioRoot;
                } else if (i == path.length - 1) {
                    leaf = new DefaultMutableTreeNode(rs.getString(i + 1), false);
                    path[i - 1].add(leaf);
                    path[i] = leaf;
                } else {
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(rs.getString(i + 1), true);
                    path[i - 1].add(node);
                    path[i] = node;
                }
            }
        }
        treeEspecie.setShowsRootHandles(true);
        treeEspecie.setExpandsSelectedPaths(true);
        treeEspecie.setToggleClickCount(1);
        jScrollPane1.setVisible(true);
        treeEspecie.setVisible(true);

        return dominioRoot;
    }

    private void expandAllNodes(JTree tree, int startingIndex, int rowCount) {
        for (int i = startingIndex; i < rowCount; ++i) {
            tree.expandRow(i);
        }

        if (tree.getRowCount() != rowCount) {
            expandAllNodes(tree, rowCount, tree.getRowCount());
        }
    }

    private int guardarArchivo(File fasta) {
        int res = 0;
        BufferedWriter bw = null;
        try {
            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fasta), "utf-8"));
            bw.write(genetica.getFasta());
        } catch (IOException e) {
            System.out.println(">" + e.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (fasta.canRead()) {
            res = 1;
        }
        return res;
    }

    private void tableListener() {
        tablaEspecie.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int index = tablaEspecie.getSelectedColumn();
                if (!e.getValueIsAdjusting() && index >= 0) {
                    if (index != 2) {
                        String obj = tablaEspecie.getModel().getValueAt(1, index).toString();
                        if (obj != null) {
                            JOptionPane.showMessageDialog(null, obj);
                        }
                    } else {
                        descargarClick();
                    }
                    BuscarPanel.this.repaint();
                    buscarClick();
                }
            }
        });
    }

    private void buscarClick() {

        if (textBuscarEspecie.getText() != null) {
            especieString = textBuscarEspecie.getText();
        }

        List<Especie> especies = null;

        try {
            especies = new EspecieControllerImpl().lista();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        especiebuscada = null;
        genetica = null;
        props = new PriorityQueue<>(comparador());

        try {
            Validacion.validarCadena(textBuscarEspecie, true, "Buscar Especie");
            boolean found = false;

            for (Especie e : especies) {
                if (!found && e.getEspecie_name().equals(especieString)) {
                    especiebuscada = e;
                    genetica = new Genetica();
                    genetica.setId_secuencia(e.getId_secuencia());
                    found = true;
                }
            }//foreach recorre especies

            if (!found) {
                throw new EspecieException("Especie no encontrada");
            }//Si NO ha encontrado la especie lanza la excepcion
        } catch (ValidacionException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }//Validacion de la caja de texto
        catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Introducir Especie",
                    JOptionPane.ERROR_MESSAGE);
        }//Si no se introdujo especie
        catch (EspecieException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Especie No Encontrada",
                    JOptionPane.ERROR_MESSAGE);
        }//Validacion Especie
        //SE DEBER√Å HACER CON CONSULTA SQL
        String pathImg = System.getProperty("user.dir") + "\\src\\testImages\\"
                + especiebuscada.getEspecie_name() + ".png";//direccion de las imagenes

        ImageIcon imagen = new ImageIcon(pathImg);

        Image image = imagen.getImage().getScaledInstance(lblImagen.getSize().width, lblImagen.getSize().height, 0);

        lblImagen.setIcon(new ImageIcon(image));
        lblImagen.setVisible(true);

        downloadButton.setVisible(true);

        try {

            treeEspecie.setModel(new DefaultTreeModel(arbolEspecie(especiebuscada)));
            expandAllNodes(treeEspecie, 0, treeEspecie.getRowCount());
        } catch (SQLException ex) {
            Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        int id = especiebuscada.getId_especie();

        rs = null;

        columnas = new ArrayList<>();
        propiedadesMap = new TreeMap<>();

        CBPropiedad descripcion = new CBPropiedad("descripcion", 1, BaseDatos.SELECT_DESCRIPCION, id);
        CBPropiedad metabolismo = new CBPropiedad("metabolismo", 2, BaseDatos.SELECT_METABOLISMO, id);
        CBPropiedad secuencia = new CBPropiedad("secuencia", 3, BaseDatos.SELECT_SECUENCIA, id);

        try {
            rs = BaseDatos.executeQuery(BaseDatos.SELECT_TABLA, id);
            if (rs.next()) {
                especiebuscada.setDescripcion(rs.getString(1));
                columnas.add(0, rs.getString(1));
                propiedadesMap.put("Descripcion", rs.getString(1));
                especiebuscada.setMetabolismo(rs.getString(2));
                columnas.add(1, rs.getString(2));
                propiedadesMap.put("Metabolismo", rs.getString(2));
                genetica.setFasta(rs.getString(3));
                columnas.add(2, rs.getString(3));
                propiedadesMap.put("Fasta", rs.getString(3));
            }
        } catch (SQLException ex) {
            Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        props.add(descripcion);
        props.add(metabolismo);
        props.add(secuencia);

        //CHECKBOX PARA LA TABLA
        if (cbEspecie1.isSelected()) {
            CBPropiedad autor = new CBPropiedad("autor", 4, BaseDatos.SELECT_AUTOR, id);
            props.add(autor);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_AUTOR, id);
                if (rs.next()) {
                    especiebuscada.setAutor(rs.getString(1));
                    columnas.add(rs.getString(1));
                    propiedadesMap.put("Autor", rs.getString(1));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (cbEspecie2.isSelected()) {
            CBPropiedad ecologia = new CBPropiedad("ecologia", 5, BaseDatos.SELECT_ECOLOGIA, id);
            props.add(ecologia);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_ECOLOGIA, id);
                if (rs.next()) {
                    especiebuscada.setEcologia(rs.getString(1));
                    columnas.add(rs.getString(1));
                    propiedadesMap.put("Ecologia", rs.getString(1));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (cbEspecie3.isSelected()) {
            CBPropiedad references = new CBPropiedad("references", 6, BaseDatos.SELECT_REFERENCES, id);
            props.add(references);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_REFERENCES, id);
                if (rs.next()) {
                    especiebuscada.setReferences(rs.getString(1));
                    columnas.add(rs.getString(1));
                    propiedadesMap.put("References", rs.getString(1));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (cbEspecie4.isSelected()) {
            CBPropiedad es_genomico_plasmido = new CBPropiedad("es_genomico_plasmido", 7, BaseDatos.SELECT_ES_GENOMICO_PLASMIDO, id);
            props.add(es_genomico_plasmido);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_ES_GENOMICO_PLASMIDO, id);
                if (rs.next()) {
                    genetica.setEs_genomico_plasmido(rs.getBoolean(1));
                    columnas.add((rs.getBoolean(1) ? "genomico" : "plasmido"));
                    propiedadesMap.put("es_genomico_plasmido", Boolean.toString(rs.getBoolean(1)));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        if (cbEspecie5.isSelected()) {
            CBPropiedad longitud = new CBPropiedad("longitud", 8, BaseDatos.SELECT_LONGITUD, id);
            props.add(longitud);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_LONGITUD, id);
                if (rs.next()) {
                    genetica.setLongitud(rs.getInt(1));
                    columnas.add(Integer.toString(rs.getInt(1)));
                    propiedadesMap.put("Longitud", rs.getString(1));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        if (cbEspecie6.isSelected()) {
            CBPropiedad topologia = new CBPropiedad("topologia", 9, BaseDatos.SELECT_TOPOLOGIA, id);
            props.add(topologia);

            try {
                rs = BaseDatos.executeQuery(BaseDatos.SELECT_TOPOLOGIA, id);
                if (rs.next()) {
                    genetica.setTopologia(rs.getString(1));
                    columnas.add(rs.getString(1));
                    propiedadesMap.put("Topologia", rs.getString(1));
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuscarPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        try {
            modelo = new EspecieTableModel(props, especiebuscada, genetica);
            //tablaEspecie = new JTable(modelo);
            tablaEspecie.setModel(modelo);
            int heightable = tablaEspecie.getSize().height;
            tablaEspecie.setRowHeight(heightable);

            tableListener();

            jScrollPane2.setVisible(
                    true);
            tablaEspecie.setVisible(
                    true);
            jScrollPane2.setEnabled(
                    true);

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void descargarClick() {

        JFrame archivoFrame = BaseSwing.crear("Descargar Archivo", 600, 400, false, true);
        String currentDirectory = System.getProperty("user.home") + "\\Documents\\";
        JFileChooser fc = new JFileChooser(currentDirectory);

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Guardar FASTA");
        int returnValue = fc.showSaveDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            System.out.println("Guardando archivo...");
            String path = fc.getSelectedFile().getAbsolutePath() + "\\" + especiebuscada.getEspecie_name() + "_fasta.txt";
            File fasta = new File(path);
            int res = guardarArchivo(fasta);
            if (fasta.canRead() && res == 1) {
                System.out.println("Archivo guarado correctamente");
            }
        } else {
            System.out.println("Archivo no guardado");
        }
        archivoFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

    }

    private Comparator comparador() {
        Comparator comparator = new Comparator<CBPropiedad>() {
            @Override
            public int compare(CBPropiedad o1, CBPropiedad o2) {
                if (o1.getId() > o2.getId()) {
                    return 1;
                } else if (o1.getId() < o2.getId()) {
                    return -1;
                } else {
                    return 0;
                }
            }
        };//comparador para priority queue
        return comparator;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarEspecie;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbEspecie1;
    private javax.swing.JCheckBox cbEspecie2;
    private javax.swing.JCheckBox cbEspecie3;
    private javax.swing.JCheckBox cbEspecie4;
    private javax.swing.JCheckBox cbEspecie5;
    private javax.swing.JCheckBox cbEspecie6;
    private javax.swing.JButton downloadButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JTable tablaEspecie;
    private javax.swing.JTextField textBuscarEspecie;
    private javax.swing.JTree treeEspecie;
    // End of variables declaration//GEN-END:variables
}
